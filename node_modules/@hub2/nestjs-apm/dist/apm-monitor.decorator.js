"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const elastic_apm_node_1 = require("elastic-apm-node");
function ApmMonitor(options) {
    return function (object, methodName, descriptor) {
        const className = object.constructor.name;
        const originalFct = descriptor.value;
        descriptor.value = new Proxy(originalFct, {
            apply: (target, thisArg, args) => {
                let apmTransaction = null;
                let apmSpan = null;
                const finalName = (options === null || options === void 0 ? void 0 : options.name) || `${className}.${methodName}`;
                try {
                    if (!elastic_apm_node_1.default.currentTransaction) {
                        apmTransaction = elastic_apm_node_1.default.startTransaction(finalName);
                    }
                    apmSpan = elastic_apm_node_1.default.startSpan(finalName);
                    if (!apmSpan) {
                        throw new Error('Unable to create APM Span.');
                    }
                }
                catch (e) {
                    return target.apply(thisArg, args);
                }
                if (options === null || options === void 0 ? void 0 : options.type) {
                    apmSpan.type = options === null || options === void 0 ? void 0 : options.type;
                }
                if (options === null || options === void 0 ? void 0 : options.subtype) {
                    apmSpan.subtype = options === null || options === void 0 ? void 0 : options.subtype;
                }
                const results = target.apply(thisArg, args);
                function setLabelFromData(...rest) {
                    if (options === null || options === void 0 ? void 0 : options.format) {
                        try {
                            options.format(...rest)
                                .forEach(({ name: n, value: v }) => apmSpan.setLabel(n, v));
                        }
                        catch (e) {
                            apmSpan.setLabel('error', `Cannot set label : ${e.message}`);
                        }
                    }
                }
                if (results instanceof Promise) {
                    results
                        .then((...rest) => {
                        setLabelFromData(...rest);
                    })
                        .finally(() => {
                        apmSpan.end();
                        if (apmTransaction) {
                            apmTransaction.end();
                        }
                    });
                }
                else {
                    setLabelFromData([results]);
                    apmSpan.end();
                }
                return results;
            },
        });
    };
}
exports.default = ApmMonitor;
//# sourceMappingURL=apm-monitor.decorator.js.map