"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const infrastructure_error_1 = require("./infrastructure.error");
describe('InfrastructureError', () => {
    it('should be instance of InfrastructureError with 1 argument (message)', () => {
        const infraError = new infrastructure_error_1.InfrastructureError('message');
        expect(infraError).toBeInstanceOf(infrastructure_error_1.InfrastructureError);
        expect(infraError.message).toEqual('message');
        expect(infraError.data).toBeUndefined();
        expect(infraError.internalError).toBeUndefined();
        expect(infraError.name).toEqual('InfrastructureError');
        expect(typeof infraError.timestamp).toEqual('number');
    });
    it('should be instance of InfrastructureError with 2 arguments (message, internalError)', () => {
        var _a;
        const err = new Error('Test');
        const infraError = new infrastructure_error_1.InfrastructureError('message', err);
        expect(infraError).toBeInstanceOf(infrastructure_error_1.InfrastructureError);
        expect(infraError.message).toEqual('message');
        expect(infraError.data).toBeUndefined();
        expect(infraError.internalError).toBeDefined();
        expect((_a = infraError.internalError) === null || _a === void 0 ? void 0 : _a.message).toEqual('Test');
        expect(infraError.name).toEqual('InfrastructureError');
        expect(typeof infraError.timestamp).toEqual('number');
    });
    it('should be instance of InfrastructureError with 3 arguments (message, internalError, data)', () => {
        var _a;
        const err = new Error('Test');
        const data = { 1: '1', 2: '2' };
        const infraError = new infrastructure_error_1.InfrastructureError('message', err, data);
        expect(infraError).toBeInstanceOf(infrastructure_error_1.InfrastructureError);
        expect(infraError.message).toEqual('message');
        expect(infraError.data).toBeDefined();
        expect(infraError.data).toEqual(data);
        expect(infraError.internalError).toBeDefined();
        expect((_a = infraError.internalError) === null || _a === void 0 ? void 0 : _a.message).toEqual('Test');
        expect(infraError.name).toEqual('InfrastructureError');
        expect(typeof infraError.timestamp).toEqual('number');
    });
    describe('toString', () => {
        it('should return the expected string', () => {
            const err = new Error('Test');
            const data = { 1: '1', 2: '2' };
            const infraError = new infrastructure_error_1.InfrastructureError('message', err, data);
            const result = infraError.toString();
            const expected = `[${infraError.name}] - ${new Date(infraError.timestamp)}: ${infraError.message}`;
            expect(result).toBe(expected);
        });
    });
});
//# sourceMappingURL=infrastructure.error.spec.js.map