"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsCursor = exports.IsCursorConstraint = void 0;
const class_validator_1 = require("class-validator");
let IsCursorConstraint = class IsCursorConstraint {
    validate(value, validationArguments) {
        const [types] = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.constraints;
        if ((0, class_validator_1.isBase64)(value)) {
            const decoded = Buffer.from(value, 'base64').toString('utf-8');
            const parts = decoded.split(',');
            let isValid = false;
            if (parts.length === types.length) {
                for (let i = 0; i < types.length; i++) {
                    const type = types[i];
                    const part = parts[i];
                    switch (type) {
                        case 'string':
                            isValid = (0, class_validator_1.isString)(part);
                            break;
                        case 'number':
                            isValid = (0, class_validator_1.isNumberString)(part);
                            break;
                        case 'date':
                            isValid = (0, class_validator_1.isISO8601)(part);
                            break;
                    }
                }
            }
            return isValid;
        }
        return false;
    }
    defaultMessage(validationArguments) {
        const [types] = validationArguments === null || validationArguments === void 0 ? void 0 : validationArguments.constraints;
        return `$property must be a base64 string built from values of types '${types}' separated by commas`;
    }
};
IsCursorConstraint = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isCursor', async: false })
], IsCursorConstraint);
exports.IsCursorConstraint = IsCursorConstraint;
function IsCursor(types, validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: 'isCursor',
            target: object.constructor,
            propertyName,
            constraints: [types],
            options: validationOptions,
            validator: IsCursorConstraint,
        });
    };
}
exports.IsCursor = IsCursor;
//# sourceMappingURL=is-cursor.validator.js.map