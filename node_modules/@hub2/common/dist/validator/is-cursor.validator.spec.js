"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_cursor_validator_1 = require("./is-cursor.validator");
describe('AntiConstraint', () => {
    let cursorConstraint;
    let validationArguments;
    beforeEach(() => {
        cursorConstraint = new is_cursor_validator_1.IsCursorConstraint();
    });
    describe('defaultMessage', () => {
        it('should return the correct error message', () => {
            validationArguments = {
                value: 'testValue',
                targetName: 'target',
                object: new Object('object'),
                constraints: [['string']],
                property: 'cursor',
            };
            const result = cursorConstraint.defaultMessage(validationArguments);
            expect(result).toBe(`$property must be a base64 string built from values of types 'string' separated by commas`);
        });
    });
    describe('validate', () => {
        it('should return true', () => {
            const encode = Buffer.from('testValue,2,2022-09-15T13:45:30').toString('base64');
            validationArguments = {
                value: encode,
                targetName: 'target',
                object: {},
                constraints: [['string', 'number', 'date']],
                property: 'cursor',
            };
            const result = cursorConstraint.validate(validationArguments.value, validationArguments);
            expect(result).toBe(true);
        });
        it('should return false', () => {
            const encode = Buffer.from('testValue,2,2022-09-15T13:45:30').toString('base64');
            validationArguments = {
                value: encode,
                targetName: 'target',
                object: {},
                constraints: [['string', 'date', 'number']],
                property: 'cursor',
            };
            const result = cursorConstraint.validate(validationArguments.value, validationArguments);
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=is-cursor.validator.spec.js.map