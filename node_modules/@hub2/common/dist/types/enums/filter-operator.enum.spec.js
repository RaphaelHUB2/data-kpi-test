"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const filter_operator_enum_1 = require("./filter-operator.enum");
describe('FilterOperator', () => {
    it('should have 22 values', () => {
        expect(Object.keys(filter_operator_enum_1.FilterOperator).length).toEqual(22);
    });
    it('should have property EQUALS with value $eq', () => {
        expect(filter_operator_enum_1.FilterOperator.EQUALS).toBe('$eq');
        expect(filter_operator_enum_1.FilterOperator.NOT_EQUALS).toBe('$ne');
        expect(filter_operator_enum_1.FilterOperator.GREATER_THAN).toBe('$gt');
        expect(filter_operator_enum_1.FilterOperator.GREATER_THAN_OR_EQUALS).toBe('$gte');
        expect(filter_operator_enum_1.FilterOperator.LOWER_THAN).toBe('lt');
        expect(filter_operator_enum_1.FilterOperator.LOWER_THAN_OR_EQUALS).toBe('$lte');
        expect(filter_operator_enum_1.FilterOperator.STARTS_WITH).toBe('$starts');
        expect(filter_operator_enum_1.FilterOperator.ENDS_WITH).toBe('$ends');
        expect(filter_operator_enum_1.FilterOperator.CONTAINS).toBe('$cont');
        expect(filter_operator_enum_1.FilterOperator.EXCLUDES).toBe('$excl');
        expect(filter_operator_enum_1.FilterOperator.IN).toBe('$in');
        expect(filter_operator_enum_1.FilterOperator.NOT_IN).toBe('$notin');
        expect(filter_operator_enum_1.FilterOperator.IS_NULL).toBe('$isnull');
        expect(filter_operator_enum_1.FilterOperator.NOT_NULL).toBe('$notnull');
        expect(filter_operator_enum_1.FilterOperator.BETWEEN).toBe('$between');
        expect(filter_operator_enum_1.FilterOperator.EQUALS_INSENSITIVE).toBe('$eqL');
        expect(filter_operator_enum_1.FilterOperator.NOT_EQUALS_INSENSITIVE).toBe('$neL');
        expect(filter_operator_enum_1.FilterOperator.STARTS_WITH_INSENSITIVE).toBe('$startsL');
        expect(filter_operator_enum_1.FilterOperator.ENDS_WITH_INSENSITIVE).toBe('$endsL');
        expect(filter_operator_enum_1.FilterOperator.CONTAINS_INSENSITIVE).toBe('$contL');
        expect(filter_operator_enum_1.FilterOperator.IN_INSENSITIVE).toBe('$inL');
        expect(filter_operator_enum_1.FilterOperator.NOT_IN_INSENSITIVE).toBe('$notinL');
    });
});
//# sourceMappingURL=filter-operator.enum.spec.js.map